#include <iostream>
using namespace std;


template<typename T>
class List
{
public:
	List();
	~List();

	void deleteFirstElem();  // Delete First Element in list

	
	void addLast(T data);  // Add Element in the end of the list


	void clear();			// Clear the list

	
	int GetSize() { return Size; }		// Get size of elements

	
	T& operator[](const int index);		// Overloaded operator

	
	void addFirst(T data);		// Add First Element in list

	
	void insert(T data, int index);		// Add Element at the specified index

	
	void removeAt(int index);		// Delete Element at the specified index

	
	void deleteLast();		// Delete the last Element in list

private:


	template<typename T>
	class Node
	{
	public:
		Node* pNext;
		T data;

		Node(T data = T(), Node* pNext = nullptr)
		{
			this->data = data;
			this->pNext = pNext;
		}
	};
	int Size;
	Node<T>* head;
};


template<typename T>
List<T>::List()
{
	Size = 0;
	head = nullptr;
}


template<typename T>
List<T>::~List()
{
	clear();
}


template<typename T>
void List<T>::deleteFirstElem()
{
	Node<T>* temp = head;

	head = head->pNext;

	delete temp;

	Size--;

}

template<typename T>
void List<T>::addLast(T data)
{
	if (head == nullptr)
	{
		head = new Node<T>(data);
	}
	else
	{
		Node<T>* current = this->head;

		while (current->pNext != nullptr)
		{
			current = current->pNext;
		}
		current->pNext = new Node<T>(data);

	}

	Size++;
}

template<typename T>
void List<T>::clear()
{
	while (Size)
	{
		deleteFirstElem();
	}
}


template<typename T>
T& List<T>::operator[](const int index)
{
	int counter = 0;

	Node<T>* current = this->head;

	while (current != nullptr)
	{
		if (counter == index)
		{
			return current->data;
		}
		current = current->pNext;
		counter++;
	}
}

template<typename T>
void List<T>::addFirst(T data)
{
	head = new Node<T>(data, head);
	Size++;
}

template<typename T>
void List<T>::insert(T data, int index)
{

	if (index == 0)
	{
		addFirst(data);
	}
	else
	{
		Node<T>* previous = this->head;

		for (int i = 0; i < index - 1; i++)
		{
			previous = previous->pNext;
		}

		Node<T>* newNode = new Node<T>(data, previous->pNext);

		previous->pNext = newNode;

		Size++;
	}





}

template<typename T>
void List<T>::removeAt(int index)
{
	if (index == 0)
	{
		deleteFirstElem();
	}
	else
	{
		Node<T>* previous = this->head;
		for (int i = 0; i < index - 1; i++)
		{
			previous = previous->pNext;
		}


		Node<T>* toDelete = previous->pNext;

		previous->pNext = toDelete->pNext;

		delete toDelete;

		Size--;
	}

}

template<typename T>
void List<T>::deleteLast()
{
	removeAt(Size - 1);
}



int main()
{
	List<int> elem;

	elem.addFirst(15); 
	elem.addFirst(12);
	elem.addLast(5);

	cout << "Number of elements now:" << elem.GetSize() << endl;
	for (int i = 0; i < elem.GetSize(); i++)
	{
		cout << elem[i] << endl;
	}



	cout << "Then delete the last Elem:"<< endl;
	elem.deleteLast();

	cout << "Number of elements: " << elem.GetSize() << endl;

	elem.insert(17, 2);
	for (int i = 0; i < elem.GetSize(); i++)
	{
		cout << elem[i] << endl;
	}

	




}
